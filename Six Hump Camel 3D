from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import numpy as np
import matplotlib
import numpy as np
import matplotlib.cm as cm
import matplotlib.mlab as mlab
import matplotlib.pyplot as plt
matplotlib.rcParams['xtick.direction'] = 'out'
matplotlib.rcParams['ytick.direction'] = 'out'

def fun(x, y):
    new1 = ( 4 - 2.1 * x**2 + (x**4)/3 ) * x**2
    new2 = x * y
    new3 = ( -4 + 4 * y**2 ) * y**2
    return new1+new2+new3

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
X = Y = np.arange(-4, 4, 0.1)
X, Y = np.meshgrid(X, Y)
Z = fun(X,Y)
ax.plot_surface(X, Y, Z)
ax.set_xlabel('X Label')
ax.set_ylabel('Y Label')
ax.set_zlabel('Z Label')
ax.scatter(X,Y,Z,color='black',s=5)
num_func_params = 3
num_swarm = 100
velocity = np.zeros([num_swarm, num_func_params])
position = -4 + 8 * np.random.rand(num_swarm, num_func_params)
personal_best_position = np.copy(position)
personal_best_value = np.zeros(num_swarm)

for i in range(num_swarm):
    personal_best_value[i] = fun(position[i][0],position[i][1])

tmax = 200
c1 = 0.001
c2 = 0.002
levels = np.linspace(-1, 35, 100)
global_best = np.min(personal_best_value)
global_best_position = np.copy(personal_best_position[np.argmin(personal_best_value)])
ax.set_autoscaley_on(False)
ax.set_ylim([-4,4])
ax.set_autoscalex_on(False)
ax.set_xlim([-4,4])
ax.set_autoscalez_on(False)
ax.set_zlim([0,1000])

for t in range (100):
    for i in range(num_swarm):
        error = fun(position[i][0],position[i][1])
        if personal_best_value[i] > error:
            personal_best_value[i] = error
            personal_best_position[i] = position[i]
    best = np.min(personal_best_value)
    best_index = np.argmin(personal_best_value)
    if global_best > best:
        global_best = best
        global_best_position = np.copy(personal_best_position[best_index])
    for i in range (num_swarm):
        velocity[i] += (c1 * np.random.rand() * (personal_best_position[i]-position[i]) \
                    +  c2 * np.random.rand() * (global_best_position - position[i]))		
        position[i] += velocity[i]
        ax.scatter(position[i][0],position[i][1],400,color='black',s=20)
    ax.scatter(global_best_position[0], global_best_position[1],450,color='red',s=50,zorder=1200)
    plt.title('{0:03d}'.format(t))
    filename = 'frame{0:03d}.png'.format(t)
    plt.savefig(filename, bbox_inches='tight')
